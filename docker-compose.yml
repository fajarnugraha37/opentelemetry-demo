version: '3.8'

x-logging: &loki-logging
  driver: json-file
  options:
    tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

services:
  # 
  # Monitoring
  # 
  promtail:
    image: ${PROMTAIL_IMAGE}
    volumes:
      - ./infra/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/host/containers
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - otel
    logging: *loki-logging

  otel-collector:
    image: ${OTEL_COLLECTOR_IMAGE}
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./infra/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP http
      - "8888:8888"   # metrics
    depends_on:
      - jaeger
      - prometheus
    networks:
      - otel
    logging: *loki-logging

  loki:
    image: ${LOKI_IMAGE}
    ports:
      - "3100:3100"
    networks:
      - otel
    logging: *loki-logging

  jaeger:
    image: ${JAEGER_IMAGE}
    ports:
      - "16686:16686"
      - "14250:14250"
    networks:
      - otel
    logging: *loki-logging

  prometheus:
    image: ${PROMETHEUS_IMAGE}
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - otel
    logging: *loki-logging

  node-exporter:
    image: ${NODE_EXPORTER_IMAGE}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points"
      - "^(aufs|proc|nsfs|shm|cgroup|tmpfs|binfmt_misc|debugfs|devpts|fusectl|hugetlbfs|fuse.lxcfs|mqueue|pstore|securityfs|sysfs|autofs|devtmpfs|configfs)"
    networks:
      - otel
    logging: *loki-logging
    
  cadvisor:
    image: ${CADVISOR_IMAGE}
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    expose:
      - 8080
    networks:
      - otel
    deploy:
      resources:
        limits:
          memory: 100M
    logging: *loki-logging
    
  grafana:
    image: ${GRAFANA_IMAGE}
    ports:
      - "3000:3000"
    env_file: "./.env.infra"
    volumes:
      - ./infra/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus
      - loki
      - jaeger
    networks:
      - otel
    logging: *loki-logging


  # 
  # Dependent services
  # 
  kafka:
    image: ${KAFKA_IMAGE}
    ports:
      - "9092:9092"
      - "9093:9093"
    env_file: "./.env.infra"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_PROCESS_ROLES: 'broker,controller'
    networks:
      - otel
    logging: *loki-logging

  kafka-exporter:
    image: ${KAFKA_EXPORTER_IMAGE}
    command: ["--kafka.server=kafka:9092"]
    ports:
      - 9308:9308   
    depends_on:
      - kafka
      - otel-collector
    networks:
      - otel
    logging: *loki-logging

  nginx:
    image: ${NGINX_IMAGE}
    ports:
      - "80:80"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - order
      - inventory
      - payment
    networks:
      - otel
    logging: *loki-logging


  # 
  # Core services
  # 
  order:
    build: 
      context: .
      dockerfile: services/order/Dockerfile
    expose:
      - "80"
    env_file: "./.env.service"
    environment:
      - SERVICE_NAME=order-service
      - KAFKA_CLIENT_ID=order-service-client
      - KAFKA_GROUP_ID=order-service-group
    depends_on:
      - kafka
      - otel-collector
    networks:
      - otel
    logging: *loki-logging

  inventory:
    build:
      context: .
      dockerfile: services/inventory/Dockerfile
    expose:
      - "80"
    env_file: "./.env.service"
    environment:
      - SERVICE_NAME=inventory-service
      - KAFKA_CLIENT_ID=inventory-service-client
      - KAFKA_GROUP_ID=inventory-service-group
    depends_on:
      - kafka
      - otel-collector
    networks:
      - otel
    logging: *loki-logging

  payment:
    build:
      context: .
      dockerfile: services/payment/Dockerfile
    expose:
      - "80"
    env_file: "./.env.service"
    environment:
      - SERVICE_NAME=payment-service
      - KAFKA_CLIENT_ID=payment-service-client
      - KAFKA_GROUP_ID=payment-service-group
    depends_on:
      - kafka
      - otel-collector
    networks:
      - otel
    logging: *loki-logging

networks:
  otel: