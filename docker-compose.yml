version: '3.8'

services:
  kafka:
    image: ${KAFKA_IMAGE}
    ports:
      - "9092:9092"
      - "9093:9093"
    env_file: "./.env.infra"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_PROCESS_ROLES: 'broker,controller'

  otel-collector:
    image: ${OTEL_COLLECTOR_IMAGE}
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./infra/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP http
      - "8888:8888"   # metrics
    depends_on:
      - jaeger
      - prometheus

  prometheus:
    image: ${PROMETHEUS_IMAGE}
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  jaeger:
    image: ${JAEGER_IMAGE}
    ports:
      - "16686:16686"
      - "14250:14250"

  loki:
    image: ${LOKI_IMAGE}
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki

  promtail:
    image: ${PROMTAIL_IMAGE}
    volumes:
      - ./infra/promtail/promtail-config.yml:/etc/promtail/config.yml
      - ./log:/var/log
    command: -config.file=/etc/promtail/config.yml

  grafana:
    image: ${GRAFANA_IMAGE}
    ports:
      - "3000:3000"
    env_file: "./.env.infra"
    volumes:
      - ./infra/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus
      - loki
      - jaeger

  order:
    build: 
      context: .
      dockerfile: services/order/Dockerfile
    restart: always
    expose:
      - "80"
    env_file: "./.env.service"
    environment:
      - SERVICE_NAME=order-service
      - KAFKA_CLIENT_ID=order-service-client
      - KAFKA_GROUP_ID=order-service-group
    depends_on:
      - kafka
      - otel-collector
      - loki

  inventory:
    build:
      context: .
      dockerfile: services/inventory/Dockerfile
    restart: always
    expose:
      - "80"
    env_file: "./.env.service"
    environment:
      - SERVICE_NAME=inventory-service
      - KAFKA_CLIENT_ID=inventory-service-client
      - KAFKA_GROUP_ID=inventory-service-group
    depends_on:
      - kafka
      - otel-collector
      - loki

  payment:
    build:
      context: .
      dockerfile: services/payment/Dockerfile
    restart: always
    expose:
      - "80"
    env_file: "./.env.service"
    environment:
      - SERVICE_NAME=payment-service
      - KAFKA_CLIENT_ID=payment-service-client
      - KAFKA_GROUP_ID=payment-service-group
    depends_on:
      - kafka
      - otel-collector
      - loki

  nginx:
    image: ${NGINX_IMAGE}
    ports:
      - "80:80"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./log:/var/log
    depends_on:
      - order
      - inventory
      - payment

volumes:
  loki_data: